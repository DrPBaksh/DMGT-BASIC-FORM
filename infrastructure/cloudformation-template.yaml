AWSTemplateFormatVersion: '2010-09-09'
Description: 'DMGT Basic Form - Data and AI Readiness Assessment Infrastructure - FIXED VERSION'

Parameters:
  Environment:
    Type: String
    Default: 'prod'
    AllowedValues: [dev, staging, prod]
    Description: Environment name

Resources:
  # S3 Bucket for Form Configuration (CSV files)
  DMGTFormConfigBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'dmgt-basic-form-config-${Environment}-${AWS::AccountId}'
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Key: Project
          Value: dmgt-basic-form
        - Key: Environment
          Value: !Ref Environment

  # S3 Bucket for Form Responses and File Uploads
  DMGTFormResponsesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'dmgt-basic-form-responses-${Environment}-${AWS::AccountId}'
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
            AllowedOrigins:
              - "*"
            MaxAge: 3000
      Tags:
        - Key: Project
          Value: dmgt-basic-form
        - Key: Environment
          Value: !Ref Environment

  # S3 Bucket for Static Website Hosting
  DMGTFormWebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'dmgt-basic-form-website-${Environment}-${AWS::AccountId}'
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      Tags:
        - Key: Project
          Value: dmgt-basic-form
        - Key: Environment
          Value: !Ref Environment

  # S3 Bucket Policy for Website
  DMGTFormWebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref DMGTFormWebsiteBucket
      PolicyDocument:
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub 'arn:aws:s3:::${DMGTFormWebsiteBucket}/*'

  # IAM Role for Lambda Functions
  DMGTFormLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'dmgt-basic-form-lambda-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                  - s3:GetObjectAttributes
                Resource:
                  - !Sub 'arn:aws:s3:::${DMGTFormConfigBucket}'
                  - !Sub 'arn:aws:s3:::${DMGTFormConfigBucket}/*'
                  - !Sub 'arn:aws:s3:::${DMGTFormResponsesBucket}'
                  - !Sub 'arn:aws:s3:::${DMGTFormResponsesBucket}/*'
      Tags:
        - Key: Project
          Value: dmgt-basic-form
        - Key: Environment
          Value: !Ref Environment

  # Lambda Function for Form Configuration
  DMGTFormConfigLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'dmgt-basic-form-config-${Environment}'
      Runtime: python3.11
      Handler: index.lambda_handler
      Role: !GetAtt DMGTFormLambdaRole.Arn
      Environment:
        Variables:
          CONFIG_BUCKET: !Ref DMGTFormConfigBucket
          RESPONSES_BUCKET: !Ref DMGTFormResponsesBucket
          VERSION: "4.0-fixed"
      Code:
        ZipFile: |
          import json
          import boto3
          import csv
          import io
          import os
          from botocore.exceptions import NoCredentialsError, ClientError

          s3 = boto3.client('s3')

          def lambda_handler(event, context):
              try:
                  http_method = event['httpMethod']
                  path = event['path']
                  
                  print(f"[v4.0] Received request: {http_method} {path}")
                  
                  # Handle CORS preflight request
                  if http_method == 'OPTIONS':
                      return {
                          'statusCode': 200,
                          'headers': {
                              'Access-Control-Allow-Origin': '*',
                              'Access-Control-Allow-Headers': 'Content-Type',
                              'Access-Control-Allow-Methods': 'OPTIONS,GET'
                          }
                      }
                  
                  if http_method == 'GET' and '/config/' in path:
                      # Get form configuration
                      form_type = path.split('/config/')[1]
                      print(f"[v4.0] Form type requested: '{form_type}'")
                      return get_form_config(form_type)
                  
                  return {
                      'statusCode': 404,
                      'headers': {
                          'Access-Control-Allow-Origin': '*',
                          'Access-Control-Allow-Headers': 'Content-Type',
                          'Access-Control-Allow-Methods': 'OPTIONS,GET'
                      },
                      'body': json.dumps({'error': 'Not found'})
                  }
              except Exception as e:
                  print(f"[v4.0] Error in lambda_handler: {str(e)}")
                  return {
                      'statusCode': 500,
                      'headers': {
                          'Access-Control-Allow-Origin': '*',
                          'Access-Control-Allow-Headers': 'Content-Type',
                          'Access-Control-Allow-Methods': 'OPTIONS,GET'
                      },
                      'body': json.dumps({'error': str(e)})
                  }

          def get_form_config(form_type):
              try:
                  config_bucket = os.environ['CONFIG_BUCKET']
                  
                  # Fix case sensitivity: capitalize first letter to match CSV filenames
                  form_type_capitalized = form_type.capitalize()
                  filename = f'{form_type_capitalized}Questions.csv'
                  
                  print(f"[v4.0] Looking for file: {filename}")
                  
                  response = s3.get_object(Bucket=config_bucket, Key=filename)
                  csv_content = response['Body'].read().decode('utf-8')
                  
                  csv_reader = csv.DictReader(io.StringIO(csv_content))
                  questions = list(csv_reader)
                  
                  print(f"[v4.0] Successfully loaded {len(questions)} questions from {filename}")
                  
                  return {
                      'statusCode': 200,
                      'headers': {
                          'Access-Control-Allow-Origin': '*',
                          'Access-Control-Allow-Headers': 'Content-Type',
                          'Access-Control-Allow-Methods': 'OPTIONS,GET'
                      },
                      'body': json.dumps(questions)
                  }
              except ClientError as e:
                  error_code = e.response['Error']['Code']
                  error_msg = e.response['Error']['Message']
                  print(f"[v4.0] S3 Error: {error_code} - {error_msg}")
                  return {
                      'statusCode': 404,
                      'headers': {
                          'Access-Control-Allow-Origin': '*',
                          'Access-Control-Allow-Headers': 'Content-Type',
                          'Access-Control-Allow-Methods': 'OPTIONS,GET'
                      },
                      'body': json.dumps({'error': f'Configuration not found: {filename}'})
                  }
              except Exception as e:
                  print(f"[v4.0] Unexpected error: {str(e)}")
                  return {
                      'statusCode': 500,
                      'headers': {
                          'Access-Control-Allow-Origin': '*',
                          'Access-Control-Allow-Headers': 'Content-Type',
                          'Access-Control-Allow-Methods': 'OPTIONS,GET'
                      },
                      'body': json.dumps({'error': f'Internal server error: {str(e)}'})
                  }
      Tags:
        - Key: Project
          Value: dmgt-basic-form
        - Key: Environment
          Value: !Ref Environment

  # Lambda Function for Form Responses - COMPLETELY REWRITTEN
  DMGTFormResponsesLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'dmgt-basic-form-responses-${Environment}'
      Runtime: python3.11
      Handler: index.lambda_handler
      Role: !GetAtt DMGTFormLambdaRole.Arn
      Environment:
        Variables:
          CONFIG_BUCKET: !Ref DMGTFormConfigBucket
          RESPONSES_BUCKET: !Ref DMGTFormResponsesBucket
          VERSION: "4.0-complete-rewrite"
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          import uuid
          from datetime import datetime
          from botocore.exceptions import ClientError

          s3 = boto3.client('s3')

          def lambda_handler(event, context):
              try:
                  http_method = event['httpMethod']
                  query_params = event.get('queryStringParameters') or {}
                  
                  print(f"[v4.0] {http_method} request with params: {query_params}")
                  
                  if http_method == 'OPTIONS':
                      return cors_response()
                  
                  if http_method == 'POST':
                      return save_response(event)
                  elif http_method == 'GET':
                      action = query_params.get('action')
                      if action == 'getEmployee':
                          return get_employee_data(event)
                      elif action == 'getCompany':
                          return get_company_data(event)
                      else:
                          return get_company_status(event)
                  
                  return error_response(405, 'Method not allowed')
              except Exception as e:
                  print(f"[v4.0] Error: {str(e)}")
                  return error_response(500, str(e))

          def cors_response():
              return {
                  'statusCode': 200,
                  'headers': {
                      'Access-Control-Allow-Origin': '*',
                      'Access-Control-Allow-Headers': 'Content-Type',
                      'Access-Control-Allow-Methods': 'OPTIONS,POST,GET'
                  }
              }

          def error_response(status_code, message):
              return {
                  'statusCode': status_code,
                  'headers': {
                      'Access-Control-Allow-Origin': '*',
                      'Access-Control-Allow-Headers': 'Content-Type',
                      'Access-Control-Allow-Methods': 'OPTIONS,POST,GET'
                  },
                  'body': json.dumps({'error': message})
              }

          def save_response(event):
              body = json.loads(event['body'])
              company_id = body['companyId']
              form_type = body['formType']
              responses = body['responses']
              employee_id = body.get('employeeId')
              is_new_employee = body.get('isNewEmployee', False)
              
              responses_bucket = os.environ['RESPONSES_BUCKET']
              timestamp = datetime.utcnow().isoformat()
              
              print(f"[v4.0] Saving {form_type} response for company {company_id}")
              
              if form_type == 'company':
                  return save_company_response(company_id, responses, timestamp, responses_bucket)
              else:
                  return save_employee_response(company_id, employee_id, is_new_employee, responses, timestamp, responses_bucket)

          def save_company_response(company_id, responses, timestamp, responses_bucket):
              """Save company response - only one per company ID allowed"""
              filename = f'{company_id}/company.json'
              
              # Check if company questionnaire already exists and is explicitly completed
              existing_data = None
              try:
                  existing_response = s3.get_object(Bucket=responses_bucket, Key=filename)
                  existing_data = json.loads(existing_response['Body'].read().decode('utf-8'))
                  
                  # If explicitly completed, prevent modifications unless forced
                  if existing_data.get('explicitlyCompleted', False):
                      print(f"[v4.0] Company questionnaire already completed")
                      # Still allow modifications but note it was completed
              except ClientError:
                  pass  # File doesn't exist, proceed with new creation
              
              # Calculate completion percentage
              total_questions = len([key for key in responses.keys() if key.startswith('Q')])
              answered_questions = len([key for key, value in responses.items() 
                                      if key.startswith('Q') and value and str(value).strip() != ''])
              completion_percentage = (answered_questions / total_questions * 100) if total_questions > 0 else 0
              
              # Prepare response data
              response_data = {
                  'companyId': company_id,
                  'formType': 'company',
                  'timestamp': existing_data['timestamp'] if existing_data else timestamp,
                  'lastUpdated': timestamp,
                  'responses': responses,
                  'completionPercentage': completion_percentage,
                  'explicitlyCompleted': False,  # Only set to True when user explicitly submits
                  'inProgress': completion_percentage > 0,
                  'version': '4.0'
              }
              
              # Save to S3
              s3.put_object(
                  Bucket=responses_bucket,
                  Key=filename,
                  Body=json.dumps(response_data, indent=2),
                  ContentType='application/json'
              )
              
              print(f"[v4.0] Company response saved: {completion_percentage}% complete")
              
              return {
                  'statusCode': 200,
                  'headers': {
                      'Access-Control-Allow-Origin': '*',
                      'Access-Control-Allow-Headers': 'Content-Type',
                      'Access-Control-Allow-Methods': 'OPTIONS,POST,GET'
                  },
                  'body': json.dumps({
                      'message': 'Company response saved successfully', 
                      'filename': filename,
                      'completionPercentage': completion_percentage,
                      'explicitlyComplete': response_data['explicitlyCompleted']
                  })
              }

          def save_employee_response(company_id, employee_id, is_new_employee, responses, timestamp, responses_bucket):
              """Save employee response - multiple employees allowed per company"""
              
              # Handle employee ID assignment
              if is_new_employee and employee_id is None:
                  employee_id = get_next_employee_id(company_id, responses_bucket)
                  print(f"[v4.0] Assigned new employee ID: {employee_id}")
              
              filename = f'{company_id}/employee_{employee_id}.json'
              
              # Check if returning employee - load existing data
              existing_data = None
              try:
                  existing_response = s3.get_object(Bucket=responses_bucket, Key=filename)
                  existing_data = json.loads(existing_response['Body'].read().decode('utf-8'))
                  print(f"[v4.0] Updating existing employee {employee_id}")
              except ClientError:
                  print(f"[v4.0] Creating new employee record {employee_id}")
              
              # Calculate completion percentage
              total_questions = len([key for key in responses.keys() if key.startswith('Q')])
              answered_questions = len([key for key, value in responses.items() 
                                      if key.startswith('Q') and value and str(value).strip() != ''])
              completion_percentage = (answered_questions / total_questions * 100) if total_questions > 0 else 0
              
              # Prepare response data
              response_data = {
                  'companyId': company_id,
                  'employeeId': employee_id,
                  'formType': 'employee',
                  'timestamp': existing_data['timestamp'] if existing_data else timestamp,
                  'lastUpdated': timestamp,
                  'responses': responses,
                  'completionPercentage': completion_percentage,
                  'version': '4.0'
              }
              
              # Save to S3
              s3.put_object(
                  Bucket=responses_bucket,
                  Key=filename,
                  Body=json.dumps(response_data, indent=2),
                  ContentType='application/json'
              )
              
              print(f"[v4.0] Employee response saved: ID {employee_id}, {completion_percentage}% complete")
              
              return {
                  'statusCode': 200,
                  'headers': {
                      'Access-Control-Allow-Origin': '*',
                      'Access-Control-Allow-Headers': 'Content-Type',
                      'Access-Control-Allow-Methods': 'OPTIONS,POST,GET'
                  },
                  'body': json.dumps({
                      'message': 'Employee response saved successfully', 
                      'filename': filename,
                      'employeeId': employee_id,
                      'completionPercentage': completion_percentage
                  })
              }

          def get_next_employee_id(company_id, responses_bucket):
              """Get the next available employee ID for the company"""
              try:
                  response = s3.list_objects_v2(Bucket=responses_bucket, Prefix=f'{company_id}/employee_')
                  if 'Contents' in response:
                      employee_files = [obj['Key'] for obj in response['Contents'] if obj['Key'].startswith(f'{company_id}/employee_')]
                      max_id = -1
                      for file_key in employee_files:
                          try:
                              employee_id = int(file_key.split('employee_')[1].split('.')[0])
                              max_id = max(max_id, employee_id)
                          except (ValueError, IndexError):
                              continue
                      return max_id + 1
                  return 0
              except ClientError:
                  return 0

          def get_employee_data(event):
              """Get existing employee data for returning employees"""
              query_params = event.get('queryStringParameters') or {}
              company_id = query_params.get('companyId')
              employee_id = query_params.get('employeeId')
              
              if not company_id or employee_id is None:
                  return error_response(400, 'companyId and employeeId required')
              
              responses_bucket = os.environ['RESPONSES_BUCKET']
              filename = f'{company_id}/employee_{employee_id}.json'
              
              try:
                  response = s3.get_object(Bucket=responses_bucket, Key=filename)
                  employee_data = json.loads(response['Body'].read().decode('utf-8'))
                  
                  print(f"[v4.0] Retrieved employee {employee_id} data for company {company_id}")
                  
                  return {
                      'statusCode': 200,
                      'headers': {
                          'Access-Control-Allow-Origin': '*',
                          'Access-Control-Allow-Headers': 'Content-Type',
                          'Access-Control-Allow-Methods': 'OPTIONS,POST,GET'
                      },
                      'body': json.dumps({
                          'found': True,
                          'employeeData': employee_data,
                          'responses': employee_data.get('responses', {}),
                          'lastUpdated': employee_data.get('lastUpdated'),
                          'employeeId': employee_id
                      })
                  }
              except ClientError as e:
                  if e.response['Error']['Code'] == 'NoSuchKey':
                      return {
                          'statusCode': 200,
                          'headers': {
                              'Access-Control-Allow-Origin': '*',
                              'Access-Control-Allow-Headers': 'Content-Type',
                              'Access-Control-Allow-Methods': 'OPTIONS,POST,GET'
                          },
                          'body': json.dumps({
                              'found': False,
                              'message': f'No employee found with ID {employee_id} for company {company_id}'
                          })
                      }
                  else:
                      raise e

          def get_company_data(event):
              """Get existing company data"""
              query_params = event.get('queryStringParameters') or {}
              company_id = query_params.get('companyId')
              
              if not company_id:
                  return error_response(400, 'companyId required')
              
              responses_bucket = os.environ['RESPONSES_BUCKET']
              filename = f'{company_id}/company.json'
              
              try:
                  response = s3.get_object(Bucket=responses_bucket, Key=filename)
                  company_data = json.loads(response['Body'].read().decode('utf-8'))
                  
                  print(f"[v4.0] Retrieved company data for {company_id}")
                  
                  return {
                      'statusCode': 200,
                      'headers': {
                          'Access-Control-Allow-Origin': '*',
                          'Access-Control-Allow-Headers': 'Content-Type',
                          'Access-Control-Allow-Methods': 'OPTIONS,POST,GET'
                      },
                      'body': json.dumps({
                          'found': True,
                          'responses': company_data.get('responses', {}),
                          'lastUpdated': company_data.get('lastUpdated'),
                          'completionPercentage': company_data.get('completionPercentage', 0),
                          'explicitlyCompleted': company_data.get('explicitlyCompleted', False)
                      })
                  }
              except ClientError as e:
                  if e.response['Error']['Code'] == 'NoSuchKey':
                      return {
                          'statusCode': 200,
                          'headers': {
                              'Access-Control-Allow-Origin': '*',
                              'Access-Control-Allow-Headers': 'Content-Type',
                              'Access-Control-Allow-Methods': 'OPTIONS,POST,GET'
                          },
                          'body': json.dumps({
                              'found': False,
                              'message': f'No company data found for {company_id}'
                          })
                      }
                  else:
                      raise e

          def get_company_status(event):
              """Get overall company status including employee count"""
              query_params = event.get('queryStringParameters', {}) or {}
              company_id = query_params.get('companyId')
              
              if not company_id:
                  return error_response(400, 'companyId required')
              
              responses_bucket = os.environ['RESPONSES_BUCKET']
              
              # Check company completion status
              company_completed = False
              company_in_progress = False
              completion_percentage = 0
              last_modified = None
              
              try:
                  response = s3.get_object(Bucket=responses_bucket, Key=f'{company_id}/company.json')
                  company_data = json.loads(response['Body'].read().decode('utf-8'))
                  company_completed = company_data.get('explicitlyCompleted', False)
                  company_in_progress = company_data.get('inProgress', False)
                  completion_percentage = company_data.get('completionPercentage', 0)
                  last_modified = company_data.get('lastUpdated')
              except ClientError:
                  pass  # Company file doesn't exist
              
              # Count employees and get their IDs
              employee_ids = []
              try:
                  response = s3.list_objects_v2(Bucket=responses_bucket, Prefix=f'{company_id}/employee_')
                  employee_files = response.get('Contents', [])
                  
                  for obj in employee_files:
                      try:
                          employee_id = int(obj['Key'].split('employee_')[1].split('.')[0])
                          employee_ids.append(employee_id)
                      except (ValueError, IndexError):
                          continue
                  
                  employee_ids.sort()
              except ClientError:
                  pass  # No employee files exist
              
              return {
                  'statusCode': 200,
                  'headers': {
                      'Access-Control-Allow-Origin': '*',
                      'Access-Control-Allow-Headers': 'Content-Type',
                      'Access-Control-Allow-Methods': 'OPTIONS,POST,GET'
                  },
                  'body': json.dumps({
                      'companyCompleted': company_completed,
                      'companyInProgress': company_in_progress,
                      'completionPercentage': completion_percentage,
                      'lastModified': last_modified,
                      'employeeCount': len(employee_ids),
                      'employeeIds': employee_ids,
                      'nextEmployeeId': max(employee_ids) + 1 if employee_ids else 0
                  })
              }
      Tags:
        - Key: Project
          Value: dmgt-basic-form
        - Key: Environment
          Value: !Ref Environment

  # Lambda Function for S3 File Operations - NEW
  DMGTFormS3Lambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'dmgt-basic-form-s3-${Environment}'
      Runtime: python3.11
      Handler: index.lambda_handler
      Role: !GetAtt DMGTFormLambdaRole.Arn
      Environment:
        Variables:
          RESPONSES_BUCKET: !Ref DMGTFormResponsesBucket
          VERSION: "4.0-s3-ops"
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          import uuid
          from datetime import datetime, timedelta
          from botocore.exceptions import ClientError
          from urllib.parse import quote

          s3 = boto3.client('s3')

          def lambda_handler(event, context):
              try:
                  http_method = event['httpMethod']
                  path = event['path']
                  
                  print(f"[S3 v4.0] {http_method} {path}")
                  
                  if http_method == 'OPTIONS':
                      return cors_response()
                  
                  if '/s3/presigned-url' in path and http_method == 'POST':
                      return generate_presigned_url(event)
                  elif '/file-registry' in path and http_method == 'POST':
                      return update_file_registry(event)
                  elif '/file-registry' in path and http_method == 'GET':
                      return get_file_registry(event)
                  elif '/s3/download-url' in path and http_method == 'POST':
                      return generate_download_url(event)
                  elif '/s3/files' in path and http_method == 'GET':
                      return list_company_files(event)
                  elif '/s3/health' in path and http_method == 'GET':
                      return health_check()
                  
                  return error_response(404, 'Endpoint not found')
              except Exception as e:
                  print(f"[S3 v4.0] Error: {str(e)}")
                  return error_response(500, str(e))

          def cors_response():
              return {
                  'statusCode': 200,
                  'headers': {
                      'Access-Control-Allow-Origin': '*',
                      'Access-Control-Allow-Headers': 'Content-Type',
                      'Access-Control-Allow-Methods': 'OPTIONS,POST,GET,DELETE'
                  }
              }

          def error_response(status_code, message):
              return {
                  'statusCode': status_code,
                  'headers': {
                      'Access-Control-Allow-Origin': '*',
                      'Access-Control-Allow-Headers': 'Content-Type',
                      'Access-Control-Allow-Methods': 'OPTIONS,POST,GET,DELETE'
                  },
                  'body': json.dumps({'error': message})
              }

          def generate_presigned_url(event):
              """Generate presigned URL for file upload"""
              body = json.loads(event['body'])
              file_name = body.get('fileName')
              file_type = body.get('fileType')
              company_id = body.get('companyId')
              employee_id = body.get('employeeId')
              question_id = body.get('questionId')
              
              if not all([file_name, file_type, company_id, question_id]):
                  return error_response(400, 'Missing required fields')
              
              # Generate S3 key based on company/employee structure
              timestamp = int(datetime.now().timestamp())
              safe_filename = "".join(c for c in file_name if c.isalnum() or c in '.-_').rstrip()
              
              if employee_id:
                  s3_key = f'companies/{company_id}/uploads/employees/{employee_id}/{question_id}/{timestamp}_{safe_filename}'
              else:
                  s3_key = f'companies/{company_id}/uploads/company/{question_id}/{timestamp}_{safe_filename}'
              
              responses_bucket = os.environ['RESPONSES_BUCKET']
              
              try:
                  # Generate presigned URL for upload
                  upload_url = s3.generate_presigned_url(
                      'put_object',
                      Params={
                          'Bucket': responses_bucket,
                          'Key': s3_key,
                          'ContentType': file_type
                      },
                      ExpiresIn=300  # 5 minutes
                  )
                  
                  # Generate presigned URL for download
                  download_url = s3.generate_presigned_url(
                      'get_object',
                      Params={
                          'Bucket': responses_bucket,
                          'Key': s3_key
                      },
                      ExpiresIn=3600  # 1 hour
                  )
                  
                  entry_id = str(uuid.uuid4())
                  
                  return {
                      'statusCode': 200,
                      'headers': {
                          'Access-Control-Allow-Origin': '*',
                          'Access-Control-Allow-Headers': 'Content-Type',
                          'Access-Control-Allow-Methods': 'OPTIONS,POST,GET,DELETE'
                      },
                      'body': json.dumps({
                          'uploadUrl': upload_url,
                          'downloadUrl': download_url,
                          's3Key': s3_key,
                          'entryId': entry_id,
                          'expiresAt': (datetime.now() + timedelta(minutes=5)).isoformat()
                      })
                  }
              except Exception as e:
                  print(f"[S3 v4.0] Error generating presigned URL: {str(e)}")
                  return error_response(500, f'Failed to generate upload URL: {str(e)}')

          def update_file_registry(event):
              """Update file registry with metadata"""
              body = json.loads(event['body'])
              
              required_fields = ['companyId', 'questionId', 'fileName', 'fileSize', 'fileType', 's3Key', 'entryId']
              if not all(field in body for field in required_fields):
                  return error_response(400, 'Missing required fields')
              
              responses_bucket = os.environ['RESPONSES_BUCKET']
              company_id = body['companyId']
              
              # Create metadata entry
              metadata = {
                  'entryId': body['entryId'],
                  'companyId': company_id,
                  'employeeId': body.get('employeeId'),
                  'questionId': body['questionId'],
                  'fileName': body['fileName'],
                  'fileSize': body['fileSize'],
                  'fileType': body['fileType'],
                  's3Key': body['s3Key'],
                  'downloadUrl': body.get('downloadUrl'),
                  'formType': 'employee' if body.get('employeeId') else 'company',
                  'uploadTimestamp': datetime.now().isoformat(),
                  'questionText': body.get('questionText', ''),
                  'version': '4.0'
              }
              
              # Get existing metadata file or create new one
              metadata_key = f'companies/{company_id}/uploads/metadata.json'
              existing_metadata = []
              
              try:
                  response = s3.get_object(Bucket=responses_bucket, Key=metadata_key)
                  existing_metadata = json.loads(response['Body'].read().decode('utf-8'))
              except ClientError:
                  pass  # File doesn't exist, start with empty list
              
              # Add new metadata entry
              existing_metadata.append(metadata)
              
              # Save updated metadata
              s3.put_object(
                  Bucket=responses_bucket,
                  Key=metadata_key,
                  Body=json.dumps(existing_metadata, indent=2),
                  ContentType='application/json'
              )
              
              print(f"[S3 v4.0] File metadata saved for {company_id}: {body['fileName']}")
              
              return {
                  'statusCode': 200,
                  'headers': {
                      'Access-Control-Allow-Origin': '*',
                      'Access-Control-Allow-Headers': 'Content-Type',
                      'Access-Control-Allow-Methods': 'OPTIONS,POST,GET,DELETE'
                  },
                  'body': json.dumps({
                      'success': True,
                      'entryId': body['entryId']
                  })
              }

          def get_file_registry(event):
              """Get file registry for company or employee"""
              query_params = event.get('queryStringParameters') or {}
              company_id = query_params.get('companyId')
              employee_id = query_params.get('employeeId')
              
              if not company_id:
                  return error_response(400, 'companyId required')
              
              responses_bucket = os.environ['RESPONSES_BUCKET']
              metadata_key = f'companies/{company_id}/uploads/metadata.json'
              
              try:
                  response = s3.get_object(Bucket=responses_bucket, Key=metadata_key)
                  all_metadata = json.loads(response['Body'].read().decode('utf-8'))
                  
                  # Filter by employee ID if specified
                  if employee_id:
                      filtered_metadata = [item for item in all_metadata if item.get('employeeId') == employee_id]
                  else:
                      filtered_metadata = all_metadata
                  
                  return {
                      'statusCode': 200,
                      'headers': {
                          'Access-Control-Allow-Origin': '*',
                          'Access-Control-Allow-Headers': 'Content-Type',
                          'Access-Control-Allow-Methods': 'OPTIONS,POST,GET,DELETE'
                      },
                      'body': json.dumps(filtered_metadata)
                  }
              except ClientError:
                  # No metadata file exists
                  return {
                      'statusCode': 200,
                      'headers': {
                          'Access-Control-Allow-Origin': '*',
                          'Access-Control-Allow-Headers': 'Content-Type',
                          'Access-Control-Allow-Methods': 'OPTIONS,POST,GET,DELETE'
                      },
                      'body': json.dumps([])
                  }

          def generate_download_url(event):
              """Generate download URL for existing file"""
              body = json.loads(event['body'])
              s3_key = body.get('s3Key')
              expiration_time = body.get('expirationTime', 3600)
              
              if not s3_key:
                  return error_response(400, 's3Key required')
              
              responses_bucket = os.environ['RESPONSES_BUCKET']
              
              try:
                  download_url = s3.generate_presigned_url(
                      'get_object',
                      Params={
                          'Bucket': responses_bucket,
                          'Key': s3_key
                      },
                      ExpiresIn=expiration_time
                  )
                  
                  return {
                      'statusCode': 200,
                      'headers': {
                          'Access-Control-Allow-Origin': '*',
                          'Access-Control-Allow-Headers': 'Content-Type',
                          'Access-Control-Allow-Methods': 'OPTIONS,POST,GET,DELETE'
                      },
                      'body': json.dumps({
                          'downloadUrl': download_url,
                          'expiresAt': (datetime.now() + timedelta(seconds=expiration_time)).isoformat()
                      })
                  }
              except Exception as e:
                  return error_response(500, f'Failed to generate download URL: {str(e)}')

          def list_company_files(event):
              """List all files for a company"""
              query_params = event.get('queryStringParameters') or {}
              company_id = query_params.get('companyId')
              
              if not company_id:
                  return error_response(400, 'companyId required')
              
              responses_bucket = os.environ['RESPONSES_BUCKET']
              metadata_key = f'companies/{company_id}/uploads/metadata.json'
              
              try:
                  response = s3.get_object(Bucket=responses_bucket, Key=metadata_key)
                  metadata = json.loads(response['Body'].read().decode('utf-8'))
                  
                  files = []
                  for item in metadata:
                      files.append({
                          'entryId': item['entryId'],
                          'fileName': item['fileName'],
                          'fileSize': item['fileSize'],
                          'uploadDate': item['uploadTimestamp'],
                          'questionId': item['questionId'],
                          'employeeId': item.get('employeeId')
                      })
                  
                  return {
                      'statusCode': 200,
                      'headers': {
                          'Access-Control-Allow-Origin': '*',
                          'Access-Control-Allow-Headers': 'Content-Type',
                          'Access-Control-Allow-Methods': 'OPTIONS,POST,GET,DELETE'
                      },
                      'body': json.dumps({
                          'files': files,
                          'totalCount': len(files)
                      })
                  }
              except ClientError:
                  return {
                      'statusCode': 200,
                      'headers': {
                          'Access-Control-Allow-Origin': '*',
                          'Access-Control-Allow-Headers': 'Content-Type',
                          'Access-Control-Allow-Methods': 'OPTIONS,POST,GET,DELETE'
                      },
                      'body': json.dumps({
                          'files': [],
                          'totalCount': 0
                      })
                  }

          def health_check():
              """Health check for S3 service"""
              try:
                  responses_bucket = os.environ['RESPONSES_BUCKET']
                  s3.head_bucket(Bucket=responses_bucket)
                  
                  return {
                      'statusCode': 200,
                      'headers': {
                          'Access-Control-Allow-Origin': '*',
                          'Access-Control-Allow-Headers': 'Content-Type',
                          'Access-Control-Allow-Methods': 'OPTIONS,POST,GET,DELETE'
                      },
                      'body': json.dumps({
                          'status': 'healthy',
                          'message': 'S3 service is operational',
                          's3Connection': 'ok',
                          'timestamp': datetime.now().isoformat()
                      })
                  }
              except Exception as e:
                  return {
                      'statusCode': 500,
                      'headers': {
                          'Access-Control-Allow-Origin': '*',
                          'Access-Control-Allow-Headers': 'Content-Type',
                          'Access-Control-Allow-Methods': 'OPTIONS,POST,GET,DELETE'
                      },
                      'body': json.dumps({
                          'status': 'unhealthy',
                          'message': str(e),
                          's3Connection': 'error',
                          'timestamp': datetime.now().isoformat()
                      })
                  }
      Tags:
        - Key: Project
          Value: dmgt-basic-form
        - Key: Environment
          Value: !Ref Environment

  # API Gateway
  DMGTFormAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub 'dmgt-basic-form-api-${Environment}'
      Description: API for DMGT Basic Form - Fixed Version
      Tags:
        - Key: Project
          Value: dmgt-basic-form
        - Key: Environment
          Value: !Ref Environment

  # API Gateway Resources
  DMGTFormConfigResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref DMGTFormAPI
      ParentId: !GetAtt DMGTFormAPI.RootResourceId
      PathPart: config

  DMGTFormConfigProxyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref DMGTFormAPI
      ParentId: !Ref DMGTFormConfigResource
      PathPart: '{proxy+}'

  DMGTFormResponsesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref DMGTFormAPI
      ParentId: !GetAtt DMGTFormAPI.RootResourceId
      PathPart: responses

  # S3 Operations Resources
  DMGTFormS3Resource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref DMGTFormAPI
      ParentId: !GetAtt DMGTFormAPI.RootResourceId
      PathPart: s3

  DMGTFormS3ProxyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref DMGTFormAPI
      ParentId: !Ref DMGTFormS3Resource
      PathPart: '{proxy+}'

  DMGTFormFileRegistryResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref DMGTFormAPI
      ParentId: !GetAtt DMGTFormAPI.RootResourceId
      PathPart: file-registry

  # API Gateway Methods
  DMGTFormConfigMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref DMGTFormAPI
      ResourceId: !Ref DMGTFormConfigProxyResource
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DMGTFormConfigLambda.Arn}/invocations'

  DMGTFormResponsesMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref DMGTFormAPI
      ResourceId: !Ref DMGTFormResponsesResource
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DMGTFormResponsesLambda.Arn}/invocations'

  DMGTFormS3Method:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref DMGTFormAPI
      ResourceId: !Ref DMGTFormS3ProxyResource
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DMGTFormS3Lambda.Arn}/invocations'

  DMGTFormFileRegistryMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref DMGTFormAPI
      ResourceId: !Ref DMGTFormFileRegistryResource
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DMGTFormS3Lambda.Arn}/invocations'

  # API Gateway Deployment
  DMGTFormAPIDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - DMGTFormConfigMethod
      - DMGTFormResponsesMethod
      - DMGTFormS3Method
      - DMGTFormFileRegistryMethod
    Properties:
      RestApiId: !Ref DMGTFormAPI
      StageName: !Ref Environment

  # Lambda Permissions
  DMGTFormConfigLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref DMGTFormConfigLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${DMGTFormAPI}/*/*/*'

  DMGTFormResponsesLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref DMGTFormResponsesLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${DMGTFormAPI}/*/*/*'

  DMGTFormS3LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref DMGTFormS3Lambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${DMGTFormAPI}/*/*/*'

  # CloudFront Distribution
  DMGTFormCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt DMGTFormWebsiteBucket.RegionalDomainName
            Id: S3Origin
            S3OriginConfig:
              OriginAccessIdentity: ''
        Enabled: true
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
        PriceClass: PriceClass_100
        Comment: !Sub 'CloudFront distribution for dmgt-basic-form-${Environment}'
      Tags:
        - Key: Project
          Value: dmgt-basic-form
        - Key: Environment
          Value: !Ref Environment

Outputs:
  WebsiteBucketName:
    Description: Name of the S3 bucket for website hosting
    Value: !Ref DMGTFormWebsiteBucket
    Export:
      Name: !Sub '${AWS::StackName}-WebsiteBucket'

  ConfigBucketName:
    Description: Name of the S3 bucket for form configuration
    Value: !Ref DMGTFormConfigBucket
    Export:
      Name: !Sub '${AWS::StackName}-ConfigBucket'

  ResponsesBucketName:
    Description: Name of the S3 bucket for form responses
    Value: !Ref DMGTFormResponsesBucket
    Export:
      Name: !Sub '${AWS::StackName}-ResponsesBucket'

  ApiGatewayUrl:
    Description: URL of the API Gateway
    Value: !Sub 'https://${DMGTFormAPI}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${AWS::StackName}-ApiUrl'

  CloudFrontDomainName:
    Description: CloudFront Distribution Domain Name
    Value: !GetAtt DMGTFormCloudFrontDistribution.DomainName
    Export:
      Name: !Sub '${AWS::StackName}-CloudFrontDomain'

  WebsiteURL:
    Description: Website URL
    Value: !Sub 'https://${DMGTFormCloudFrontDistribution.DomainName}'
    Export:
      Name: !Sub '${AWS::StackName}-WebsiteURL'
