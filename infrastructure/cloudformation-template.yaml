AWSTemplateFormatVersion: '2010-09-09'
Description: 'DMGT Basic Form - Complete infrastructure with enhanced file upload support'

Parameters:
  Environment:
    Type: String
    Default: 'dev'
    AllowedValues: [dev, staging, prod]
    Description: Environment name

Resources:
  # S3 Bucket for Form Configuration (CSV files) 
  DMGTFormConfigBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: !Sub 'dmgt-basic-form-config-${Environment}-${AWS::AccountId}'
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Key: Project
          Value: dmgt-basic-form
        - Key: Environment
          Value: !Ref Environment

  # S3 Bucket for Form Responses
  DMGTFormResponsesBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: !Sub 'dmgt-basic-form-responses-${Environment}-${AWS::AccountId}'
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
            AllowedOrigins:
              - "*"
            MaxAge: 3000
      Tags:
        - Key: Project
          Value: dmgt-basic-form
        - Key: Environment
          Value: !Ref Environment

  # S3 Bucket for Static Website Hosting
  DMGTFormWebsiteBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: !Sub 'dmgt-basic-form-website-${Environment}-${AWS::AccountId}'
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      Tags:
        - Key: Project
          Value: dmgt-basic-form
        - Key: Environment
          Value: !Ref Environment

  # S3 Bucket Policy for Website
  DMGTFormWebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref DMGTFormWebsiteBucket
      PolicyDocument:
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub 'arn:aws:s3:::${DMGTFormWebsiteBucket}/*'

  # IAM Role for Lambda Functions
  DMGTFormLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'dmgt-basic-form-lambda-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                  - s3:GetObjectAttributes
                Resource:
                  - !Sub 'arn:aws:s3:::${DMGTFormConfigBucket}'
                  - !Sub 'arn:aws:s3:::${DMGTFormConfigBucket}/*'
                  - !Sub 'arn:aws:s3:::${DMGTFormResponsesBucket}'
                  - !Sub 'arn:aws:s3:::${DMGTFormResponsesBucket}/*'
      Tags:
        - Key: Project
          Value: dmgt-basic-form
        - Key: Environment
          Value: !Ref Environment

  # Main Lambda Function for all API operations - ENHANCED VERSION
  DMGTFormMainLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'dmgt-basic-form-main-${Environment}'
      Runtime: python3.11
      Handler: index.lambda_handler
      Role: !GetAtt DMGTFormLambdaRole.Arn
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          CONFIG_BUCKET: !Ref DMGTFormConfigBucket
          RESPONSES_BUCKET: !Ref DMGTFormResponsesBucket
          VERSION: "6.0-enhanced-upload"
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          import base64
          import uuid
          from datetime import datetime
          from botocore.exceptions import ClientError

          s3 = boto3.client('s3')

          def lambda_handler(event, context):
              try:
                  http_method = event['httpMethod']
                  path = event['path']
                  path_params = event.get('pathParameters') or {}
                  query_params = event.get('queryStringParameters') or {}
                  
                  print(f"[v6.0] {http_method} {path}")
                  
                  # Handle CORS preflight
                  if http_method == 'OPTIONS':
                      return cors_response()
                  
                  # Parse body for POST requests
                  body = {}
                  if http_method == 'POST' and event.get('body'):
                      try:
                          body = json.loads(event['body'])
                      except json.JSONDecodeError:
                          pass
                  
                  # Route requests based on path and action
                  action = body.get('action')
                  
                  if action == 'getPresignedUrl':
                      return handle_presigned_url(body)
                  elif action == 'uploadFile':
                      return handle_file_upload(body)
                  elif path.startswith('/company-status/'):
                      return get_company_status(path_params.get('companyId'))
                  elif path.startswith('/employee-list/'):
                      return get_employee_list(path_params.get('companyId'))
                  elif path.startswith('/employee-data/'):
                      company_id = path_params.get('companyId')
                      employee_id = path_params.get('employeeId')
                      return get_employee_data(company_id, employee_id)
                  elif path == '/save-company' and http_method == 'POST':
                      return save_company_form(event)
                  elif path == '/save-employee' and http_method == 'POST':
                      return save_employee_form(event)
                  else:
                      return error_response(404, 'Endpoint not found')
                      
              except Exception as e:
                  print(f"[v6.0] Error: {str(e)}")
                  return error_response(500, str(e))

          def cors_response():
              return {
                  'statusCode': 200,
                  'headers': {
                      'Access-Control-Allow-Origin': '*',
                      'Access-Control-Allow-Headers': 'Content-Type,Authorization',
                      'Access-Control-Allow-Methods': 'OPTIONS,POST,GET,PUT'
                  }
              }

          def error_response(status_code, message):
              return {
                  'statusCode': status_code,
                  'headers': {
                      'Access-Control-Allow-Origin': '*',
                      'Access-Control-Allow-Headers': 'Content-Type,Authorization',
                      'Access-Control-Allow-Methods': 'OPTIONS,POST,GET,PUT'
                  },
                  'body': json.dumps({'error': message})
              }

          def success_response(data):
              return {
                  'statusCode': 200,
                  'headers': {
                      'Access-Control-Allow-Origin': '*',
                      'Access-Control-Allow-Headers': 'Content-Type,Authorization',
                      'Access-Control-Allow-Methods': 'OPTIONS,POST,GET,PUT'
                  },
                  'body': json.dumps(data)
              }

          def handle_presigned_url(body):
              """Generate presigned URL for S3 upload"""
              try:
                  file_name = body.get('fileName')
                  content_type = body.get('contentType')
                  s3_key = body.get('s3Key')
                  bucket = body.get('bucket', os.environ['RESPONSES_BUCKET'])
                  
                  if not all([file_name, content_type, s3_key]):
                      return error_response(400, 'Missing required parameters')
                  
                  presigned_url = s3.generate_presigned_url(
                      'put_object',
                      Params={
                          'Bucket': bucket,
                          'Key': s3_key,
                          'ContentType': content_type
                      },
                      ExpiresIn=300
                  )
                  
                  return success_response({
                      'presignedUrl': presigned_url,
                      's3Key': s3_key,
                      'bucket': bucket
                  })
                  
              except Exception as e:
                  return error_response(500, f'Failed to generate presigned URL: {str(e)}')

          def handle_file_upload(body):
              """Handle direct file upload"""
              try:
                  file_data = body.get('fileData')
                  file_name = body.get('fileName')
                  s3_key = body.get('s3Key')
                  content_type = body.get('contentType', 'application/octet-stream')
                  bucket = body.get('bucket', os.environ['RESPONSES_BUCKET'])
                  
                  if not all([file_data, file_name, s3_key]):
                      return error_response(400, 'Missing required parameters')
                  
                  # Decode base64 file data
                  file_bytes = base64.b64decode(file_data)
                  
                  # Upload to S3
                  s3.put_object(
                      Bucket=bucket,
                      Key=s3_key,
                      Body=file_bytes,
                      ContentType=content_type,
                      Metadata={
                          'original-filename': file_name,
                          'upload-timestamp': datetime.utcnow().isoformat()
                      }
                  )
                  
                  file_id = f"file_{uuid.uuid4().hex[:12]}"
                  
                  return success_response({
                      'success': True,
                      'fileId': file_id,
                      's3Key': s3_key,
                      'bucket': bucket,
                      'fileName': file_name
                  })
                  
              except Exception as e:
                  return error_response(500, f'File upload failed: {str(e)}')

          def get_company_status(company_id):
              """Check if company form is completed, in progress, or not started"""
              if not company_id:
                  return error_response(400, 'Company ID is required')
              
              responses_bucket = os.environ['RESPONSES_BUCKET']
              filename = f'{company_id}/company.json'
              
              try:
                  response = s3.get_object(Bucket=responses_bucket, Key=filename)
                  data = json.loads(response['Body'].read().decode('utf-8'))
                  
                  is_completed = data.get('isCompleted', False)
                  
                  if is_completed:
                      status = 'completed'
                  elif data.get('currentSection', 1) > 1:
                      status = 'in-progress'
                  else:
                      status = 'in-progress'
                  
                  return success_response({
                      'status': status,
                      'formData': data
                  })
                  
              except ClientError as e:
                  if e.response['Error']['Code'] == 'NoSuchKey':
                      return success_response({'status': 'not-started'})
                  else:
                      raise e

          def get_employee_list(company_id):
              """Get list of employees who have completed forms for this company"""
              if not company_id:
                  return error_response(400, 'Company ID is required')
              
              responses_bucket = os.environ['RESPONSES_BUCKET']
              employees = []
              
              try:
                  response = s3.list_objects_v2(
                      Bucket=responses_bucket, 
                      Prefix=f'{company_id}/employee_'
                  )
                  
                  if 'Contents' in response:
                      for obj in response['Contents']:
                          try:
                              employee_response = s3.get_object(Bucket=responses_bucket, Key=obj['Key'])
                              employee_data = json.loads(employee_response['Body'].read().decode('utf-8'))
                              
                              employee_id = obj['Key'].split('employee_')[1].split('.')[0]
                              
                              section1 = employee_data.get('section1', {})
                              name = f"{section1.get('firstName', '')} {section1.get('lastName', '')}".strip()
                              if not name:
                                  name = None
                              
                              employees.append({
                                  'id': employee_id,
                                  'name': name,
                                  'completed': employee_data.get('isCompleted', False),
                                  'lastSaved': employee_data.get('lastSaved')
                              })
                          except Exception as e:
                              print(f"Error processing employee file {obj['Key']}: {str(e)}")
                              continue
                  
                  return success_response({'employees': employees})
                  
              except ClientError as e:
                  print(f"Error listing employees: {str(e)}")
                  return success_response({'employees': []})

          def get_employee_data(company_id, employee_id):
              """Get existing employee data for returning employees"""
              if not company_id or not employee_id:
                  return error_response(400, 'Company ID and Employee ID are required')
              
              responses_bucket = os.environ['RESPONSES_BUCKET']
              filename = f'{company_id}/employee_{employee_id}.json'
              
              try:
                  response = s3.get_object(Bucket=responses_bucket, Key=filename)
                  data = json.loads(response['Body'].read().decode('utf-8'))
                  
                  return success_response({
                      'found': True,
                      'formData': data
                  })
                  
              except ClientError as e:
                  if e.response['Error']['Code'] == 'NoSuchKey':
                      return success_response({'found': False})
                  else:
                      raise e

          def save_company_form(event):
              """Save company form data to S3"""
              body = json.loads(event['body'])
              company_id = body['companyId']
              form_data = body['formData']
              section = body['section']
              
              if not company_id:
                  return error_response(400, 'Company ID is required')
              
              responses_bucket = os.environ['RESPONSES_BUCKET']
              filename = f'{company_id}/company.json'
              
              s3.put_object(
                  Bucket=responses_bucket,
                  Key=filename,
                  Body=json.dumps(form_data, indent=2),
                  ContentType='application/json'
              )
              
              print(f"[v6.0] Company form saved: {company_id}, section {section}")
              
              return success_response({
                  'message': 'Company form saved successfully',
                  'companyId': company_id,
                  'section': section
              })

          def save_employee_form(event):
              """Save employee form data to S3"""
              body = json.loads(event['body'])
              company_id = body['companyId']
              employee_id = body['employeeId']
              form_data = body['formData']
              section = body['section']
              
              if not company_id or not employee_id:
                  return error_response(400, 'Company ID and Employee ID are required')
              
              responses_bucket = os.environ['RESPONSES_BUCKET']
              filename = f'{company_id}/employee_{employee_id}.json'
              
              s3.put_object(
                  Bucket=responses_bucket,
                  Key=filename,
                  Body=json.dumps(form_data, indent=2),
                  ContentType='application/json'
              )
              
              print(f"[v6.0] Employee form saved: {company_id}, employee {employee_id}, section {section}")
              
              return success_response({
                  'message': 'Employee form saved successfully',
                  'companyId': company_id,
                  'employeeId': employee_id,
                  'section': section
              })
      Tags:
        - Key: Project
          Value: dmgt-basic-form
        - Key: Environment
          Value: !Ref Environment

  # API Gateway
  DMGTFormAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub 'dmgt-basic-form-api-${Environment}'
      Description: API for DMGT Basic Form - Enhanced Version
      Tags:
        - Key: Project
          Value: dmgt-basic-form
        - Key: Environment
          Value: !Ref Environment

  # API Gateway Resources
  CompanyStatusResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref DMGTFormAPI
      ParentId: !GetAtt DMGTFormAPI.RootResourceId
      PathPart: company-status

  CompanyStatusProxyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref DMGTFormAPI
      ParentId: !Ref CompanyStatusResource
      PathPart: '{companyId}'

  EmployeeListResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref DMGTFormAPI
      ParentId: !GetAtt DMGTFormAPI.RootResourceId
      PathPart: employee-list

  EmployeeListProxyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref DMGTFormAPI
      ParentId: !Ref EmployeeListResource
      PathPart: '{companyId}'

  EmployeeDataResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref DMGTFormAPI
      ParentId: !GetAtt DMGTFormAPI.RootResourceId
      PathPart: employee-data

  EmployeeDataCompanyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref DMGTFormAPI
      ParentId: !Ref EmployeeDataResource
      PathPart: '{companyId}'

  EmployeeDataProxyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref DMGTFormAPI
      ParentId: !Ref EmployeeDataCompanyResource
      PathPart: '{employeeId}'

  SaveCompanyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref DMGTFormAPI
      ParentId: !GetAtt DMGTFormAPI.RootResourceId
      PathPart: save-company

  SaveEmployeeResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref DMGTFormAPI
      ParentId: !GetAtt DMGTFormAPI.RootResourceId
      PathPart: save-employee

  # API Gateway Methods
  CompanyStatusMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref DMGTFormAPI
      ResourceId: !Ref CompanyStatusProxyResource
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DMGTFormMainLambda.Arn}/invocations'

  EmployeeListMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref DMGTFormAPI
      ResourceId: !Ref EmployeeListProxyResource
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DMGTFormMainLambda.Arn}/invocations'

  EmployeeDataMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref DMGTFormAPI
      ResourceId: !Ref EmployeeDataProxyResource
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DMGTFormMainLambda.Arn}/invocations'

  SaveCompanyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref DMGTFormAPI
      ResourceId: !Ref SaveCompanyResource
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DMGTFormMainLambda.Arn}/invocations'

  SaveEmployeeMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref DMGTFormAPI
      ResourceId: !Ref SaveEmployeeResource
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DMGTFormMainLambda.Arn}/invocations'

  # API Gateway Deployment
  DMGTFormAPIDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - CompanyStatusMethod
      - EmployeeListMethod
      - EmployeeDataMethod
      - SaveCompanyMethod
      - SaveEmployeeMethod
    Properties:
      RestApiId: !Ref DMGTFormAPI
      StageName: !Ref Environment

  # Lambda Permission
  DMGTFormMainLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref DMGTFormMainLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${DMGTFormAPI}/*/*/*'

  # CloudFront Distribution
  DMGTFormCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt DMGTFormWebsiteBucket.RegionalDomainName
            Id: S3Origin
            S3OriginConfig:
              OriginAccessIdentity: ''
        Enabled: true
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
        PriceClass: PriceClass_100
        Comment: !Sub 'CloudFront distribution for dmgt-basic-form-${Environment}'
      Tags:
        - Key: Project
          Value: dmgt-basic-form
        - Key: Environment
          Value: !Ref Environment

Outputs:
  WebsiteBucketName:
    Description: Name of the S3 bucket for website hosting
    Value: !Ref DMGTFormWebsiteBucket
    Export:
      Name: !Sub '${AWS::StackName}-WebsiteBucket'

  ConfigBucketName:
    Description: Name of the S3 bucket for form configuration
    Value: !Ref DMGTFormConfigBucket
    Export:
      Name: !Sub '${AWS::StackName}-ConfigBucket'

  ResponsesBucketName:
    Description: Name of the S3 bucket for form responses
    Value: !Ref DMGTFormResponsesBucket
    Export:
      Name: !Sub '${AWS::StackName}-ResponsesBucket'

  ApiGatewayUrl:
    Description: URL of the API Gateway
    Value: !Sub 'https://${DMGTFormAPI}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${AWS::StackName}-ApiUrl'

  CloudFrontDomainName:
    Description: CloudFront Distribution Domain Name
    Value: !GetAtt DMGTFormCloudFrontDistribution.DomainName
    Export:
      Name: !Sub '${AWS::StackName}-CloudFrontDomain'

  WebsiteURL:
    Description: Website URL
    Value: !Sub 'https://${DMGTFormCloudFrontDistribution.DomainName}'
    Export:
      Name: !Sub '${AWS::StackName}-WebsiteURL'