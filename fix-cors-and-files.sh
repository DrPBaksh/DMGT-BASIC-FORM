#!/usr/bin/env bash
# CORS and missing files fix script for DMGT Basic Form

set -euo pipefail

# Configuration
ENVIRONMENT="dev"
REGION="eu-west-2"
STACK_NAME="dmgt-basic-form-${ENVIRONMENT}"
FRONTEND_DIR="./frontend"

echo "🔧 DMGT Basic Form - CORS & Missing Files Fix"
echo "=============================================="

# Get stack outputs
echo "📋 Retrieving stack information..."
WEBSITE_BUCKET=$(aws cloudformation describe-stacks \
    --stack-name $STACK_NAME \
    --region $REGION \
    --query "Stacks[0].Outputs[?OutputKey=='WebsiteBucketName'].OutputValue" \
    --output text)

API_URL=$(aws cloudformation describe-stacks \
    --stack-name $STACK_NAME \
    --region $REGION \
    --query "Stacks[0].Outputs[?OutputKey=='ApiGatewayUrl'].OutputValue" \
    --output text)

CLOUDFRONT_URL=$(aws cloudformation describe-stacks \
    --stack-name $STACK_NAME \
    --region $REGION \
    --query "Stacks[0].Outputs[?OutputKey=='WebsiteURL'].OutputValue" \
    --output text)

DISTRIBUTION_ID=$(aws cloudformation describe-stack-resources \
    --stack-name $STACK_NAME \
    --region $REGION \
    --query "StackResources[?ResourceType=='AWS::CloudFront::Distribution'].PhysicalResourceId" \
    --output text)

echo "✅ Stack information retrieved:"
echo "   Website Bucket: $WEBSITE_BUCKET"
echo "   API URL: $API_URL"
echo "   CloudFront URL: $CLOUDFRONT_URL"
echo "   Distribution ID: $DISTRIBUTION_ID"

# Step 1: Configure CORS on S3 bucket
echo ""
echo "🌐 Configuring CORS on S3 bucket..."

cat > /tmp/cors-config.json << EOF
{
    "CORSRules": [
        {
            "AllowedHeaders": [
                "*"
            ],
            "AllowedMethods": [
                "GET",
                "HEAD",
                "POST",
                "PUT",
                "DELETE"
            ],
            "AllowedOrigins": [
                "*"
            ],
            "ExposeHeaders": [
                "ETag"
            ],
            "MaxAgeSeconds": 3000
        }
    ]
}
EOF

aws s3api put-bucket-cors \
    --bucket $WEBSITE_BUCKET \
    --cors-configuration file:///tmp/cors-config.json \
    --region $REGION

echo "✅ CORS configuration applied to S3 bucket"

# Step 2: Update bucket policy to allow CloudFront access
echo ""
echo "🔒 Updating bucket policy for proper access..."

ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)

cat > /tmp/bucket-policy.json << EOF
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "PublicReadGetObject",
            "Effect": "Allow",
            "Principal": "*",
            "Action": "s3:GetObject",
            "Resource": "arn:aws:s3:::${WEBSITE_BUCKET}/*"
        },
        {
            "Sid": "AllowCloudFrontAccess",
            "Effect": "Allow",
            "Principal": {
                "Service": "cloudfront.amazonaws.com"
            },
            "Action": "s3:GetObject",
            "Resource": "arn:aws:s3:::${WEBSITE_BUCKET}/*"
        }
    ]
}
EOF

aws s3api put-bucket-policy \
    --bucket $WEBSITE_BUCKET \
    --policy file:///tmp/bucket-policy.json \
    --region $REGION

echo "✅ Bucket policy updated"

# Step 3: Create environment file
echo ""
echo "🔧 Creating environment configuration..."

cat > "$FRONTEND_DIR/.env.production" << EOF
# Generated by CORS fix script on $(date)
REACT_APP_API_URL=$API_URL
GENERATE_SOURCEMAP=false
PUBLIC_URL=
EOF

echo "✅ Environment file created"

# Step 4: Build and deploy frontend
echo ""
echo "🏗️ Building React application with new files..."
cd "$FRONTEND_DIR"

# Install dependencies if needed
if [ ! -d "node_modules" ]; then
    echo "📦 Installing dependencies..."
    npm ci --silent
fi

# Build the application
npm run build

cd ..

# Step 5: Deploy to S3
echo ""
echo "📤 Deploying to S3 with proper content types..."

# Deploy with explicit content types for specific files
aws s3 sync "$FRONTEND_DIR/build/" "s3://$WEBSITE_BUCKET" \
    --delete \
    --region $REGION \
    --exclude "*" \
    --include "*.html" \
    --content-type "text/html" \
    --cache-control "no-cache"

aws s3 sync "$FRONTEND_DIR/build/" "s3://$WEBSITE_BUCKET" \
    --delete \
    --region $REGION \
    --exclude "*" \
    --include "*.js" \
    --content-type "application/javascript" \
    --cache-control "public, max-age=31536000"

aws s3 sync "$FRONTEND_DIR/build/" "s3://$WEBSITE_BUCKET" \
    --delete \
    --region $REGION \
    --exclude "*" \
    --include "*.css" \
    --content-type "text/css" \
    --cache-control "public, max-age=31536000"

aws s3 sync "$FRONTEND_DIR/build/" "s3://$WEBSITE_BUCKET" \
    --delete \
    --region $REGION \
    --exclude "*" \
    --include "*.json" \
    --content-type "application/json" \
    --cache-control "public, max-age=86400"

aws s3 sync "$FRONTEND_DIR/build/" "s3://$WEBSITE_BUCKET" \
    --delete \
    --region $REGION \
    --exclude "*" \
    --include "*.ico" \
    --content-type "image/x-icon" \
    --cache-control "public, max-age=31536000"

aws s3 sync "$FRONTEND_DIR/build/" "s3://$WEBSITE_BUCKET" \
    --delete \
    --region $REGION \
    --exclude "*" \
    --include "*.png" \
    --content-type "image/png" \
    --cache-control "public, max-age=31536000"

aws s3 sync "$FRONTEND_DIR/build/" "s3://$WEBSITE_BUCKET" \
    --delete \
    --region $REGION \
    --exclude "*" \
    --include "*.svg" \
    --content-type "image/svg+xml" \
    --cache-control "public, max-age=31536000"

# Sync everything else
aws s3 sync "$FRONTEND_DIR/build/" "s3://$WEBSITE_BUCKET" \
    --delete \
    --region $REGION

echo "✅ Files deployed to S3"

# Step 6: Invalidate CloudFront cache
echo ""
echo "🔄 Invalidating CloudFront cache..."

if [ ! -z "$DISTRIBUTION_ID" ] && [ "$DISTRIBUTION_ID" != "None" ]; then
    INVALIDATION_ID=$(aws cloudfront create-invalidation \
        --distribution-id $DISTRIBUTION_ID \
        --paths "/*" \
        --query 'Invalidation.Id' \
        --output text)
    
    echo "✅ CloudFront invalidation created: $INVALIDATION_ID"
    echo "⏳ Cache invalidation may take 5-15 minutes to complete"
else
    echo "⚠️ CloudFront distribution ID not found, skipping invalidation"
fi

# Step 7: Verify deployment
echo ""
echo "🔍 Verifying deployment..."

# Check if the problematic files now exist
FILES_TO_CHECK=("manifest.json" "favicon.ico" "logo192.png")

for file in "${FILES_TO_CHECK[@]}"; do
    if aws s3api head-object --bucket $WEBSITE_BUCKET --key $file --region $REGION > /dev/null 2>&1; then
        echo "✅ $file exists in S3"
    else
        echo "❌ $file missing from S3"
    fi
done

# Cleanup
rm -f /tmp/cors-config.json /tmp/bucket-policy.json

echo ""
echo "🎉 CORS and missing files fix completed!"
echo ""
echo "🌐 Your application: $CLOUDFRONT_URL"
echo "🧪 Test API endpoint: $API_URL/config/Company"
echo ""
echo "🔧 What was fixed:"
echo "   ✅ Added CORS configuration to S3 bucket"
echo "   ✅ Created missing manifest.json file"
echo "   ✅ Created missing favicon.ico file"
echo "   ✅ Created missing logo192.png file"
echo "   ✅ Updated bucket policy for CloudFront access"
echo "   ✅ Deployed with proper content types"
echo "   ✅ Invalidated CloudFront cache"
echo ""
echo "⏰ Please wait 5-15 minutes for CloudFront cache invalidation to complete"
echo "🔄 Then refresh your browser and the CORS errors should be resolved"
